Subrahmanyeswarao Karri:
Sr Data Architect | MongoDB |MySQL| MS SQL | Influx | PostgreSQL
----------------------------------------------------------------
MySQL Upgrade Plan: 5.5 to 8.0 in Master-Slave Setup
Objective:
Upgrade MySQL from version 5.5 to 8.0 in a master-slave replication environment, minimizing downtime and ensuring smooth replication throughout the process.

Pre-Upgrade Checklist
Backup:

Full Backup: Take full backups of the master and all slave servers using:
mysqldump for logical backups.
xtrabackup for physical, hot backups (recommended for large databases).
Backup configuration files (my.cnf or my.ini).
Check Replication Status:

Ensure replication is running correctly:
sql
Copy
Edit
SHOW SLAVE STATUS\G
Test on Non-Production Environment:

Clone your setup to a test environment and perform a dry run to identify any potential issues.
Review MySQL 8.0 Upgrade Documentation:

Understand any breaking changes and new features introduced in MySQL 8.0:
MySQL 8.0 Upgrade Guide.
Compatibility Check:

Use mysql_upgrade_checker or MySQL Shell to verify any compatibility issues.
Disable Write Traffic:

Ensure that no write operations happen on the master during the upgrade process.
Upgrade Process (5.5 → 5.6 → 5.7 → 8.0)
Step 1: Upgrade Slave Servers First
1.1. Upgrade Slave 1 from MySQL 5.5 to MySQL 5.6

Stop MySQL:

bash
Copy
Edit
sudo systemctl stop mysql
Install MySQL 5.6:

On Debian/Ubuntu:
bash
Copy
Edit
sudo apt-get update
sudo apt-get install mysql-server-5.6
On CentOS/RHEL:
bash
Copy
Edit
sudo yum update mysql-server
Run mysql_upgrade:

bash
Copy
Edit
sudo mysql_upgrade -u root -p
Start MySQL:

bash
Copy
Edit
sudo systemctl start mysql
Verify Replication:

Ensure that replication is still functioning:
sql
Copy
Edit
SHOW SLAVE STATUS\G
1.2. Repeat the Process for Slave 2

Follow the same steps to upgrade the second slave from 5.5 to 5.6.
Step 2: Upgrade Slave Servers from 5.6 to 5.7
Stop MySQL:

bash
Copy
Edit
sudo systemctl stop mysql
Install MySQL 5.7:

On Debian/Ubuntu:
bash
Copy
Edit
sudo apt-get install mysql-server-5.7
On CentOS/RHEL:
bash
Copy
Edit
sudo yum install mysql-server
Run mysql_upgrade:

bash
Copy
Edit
sudo mysql_upgrade -u root -p
Start MySQL:

bash
Copy
Edit
sudo systemctl start mysql
Verify Replication:

sql
Copy
Edit
SHOW SLAVE STATUS\G
1.3. Upgrade Slave Servers from 5.7 to 8.0

Stop MySQL:

bash
Copy
Edit
sudo systemctl stop mysql
Install MySQL 8.0:

On Debian/Ubuntu:
bash
Copy
Edit
sudo apt-get install mysql-server-8.0
On CentOS/RHEL:
bash
Copy
Edit
sudo yum install mysql-server
Run mysql_upgrade:

bash
Copy
Edit
sudo mysql_upgrade -u root -p
Start MySQL:

bash
Copy
Edit
sudo systemctl start mysql
Verify Replication:

sql
Copy
Edit
SHOW SLAVE STATUS\G
1.4. Repeat the Process for Slave 2

Upgrade the second slave to MySQL 8.0.
Step 3: Upgrade Master Server
3.1. Upgrade Master from MySQL 5.5 to MySQL 5.6

Stop MySQL:

bash
Copy
Edit
sudo systemctl stop mysql
Install MySQL 5.6:

Install MySQL 5.6 on the master server.
Run mysql_upgrade:

bash
Copy
Edit
sudo mysql_upgrade -u root -p
Start MySQL:

bash
Copy
Edit
sudo systemctl start mysql
Verify Replication:

Ensure replication is still intact after upgrading the master.
3.2. Upgrade Master from MySQL 5.6 to MySQL 5.7

Follow the same procedure for upgrading the master from MySQL 5.6 to MySQL 5.7.
3.3. Upgrade Master from MySQL 5.7 to MySQL 8.0

Stop MySQL:

bash
Copy
Edit
sudo systemctl stop mysql
Install MySQL 8.0:

Install MySQL 8.0 on the master.
Run mysql_upgrade:

bash
Copy
Edit
sudo mysql_upgrade -u root -p
Start MySQL:

bash
Copy
Edit
sudo systemctl start mysql
Verify Replication:

sql
Copy
Edit
SHOW SLAVE STATUS\G
Post-Upgrade Tasks
Re-enable Write Traffic:

Once replication is stable, re-enable write operations to the master.
Monitor Replication:

Check replication status using SHOW SLAVE STATUS\G on both slaves.
Ensure no replication lag and that Slave_IO_Running and Slave_SQL_Running are both "Yes".
Run Application Tests:

Run tests on the application to ensure compatibility with MySQL 8.0.
Review Logs:

Check MySQL error logs for any warnings or errors.
Clean Up:

Remove any unnecessary MySQL packages from old versions.
Estimated Downtime
Factors Affecting Downtime:
Backup time: Using mysqldump or xtrabackup.
Upgrade process: Time taken for upgrading each version step (5.5 → 5.6 → 5.7 → 8.0).
Replication sync: Ensuring replication continues functioning without errors.
Downtime Estimation:
Backup: 1-4 hours (depending on the backup method and database size).
Slave Upgrade (5.5 → 5.6 → 5.7 → 8.0): 1–2 hours per slave.
Master Upgrade: 2–4 hours.
Replication Testing & Final Sync: 1–2 hours.
Post-Upgrade Tasks: 1–2 hours.
Total Downtime (Master Upgrade):
Minimal Downtime: 4-8 hours (with proper replication setup).
Extended Downtime: 6-12 hours (if direct upgrade is done without replication or careful planning).
How to Minimize Downtime
Use Replication:

Upgrade slaves first, ensuring minimal downtime on the master.
Upgrade the master last, reducing downtime for write operations.
Use Physical Backups:

Use xtrabackup for faster backups with minimal downtime.
Test and Monitor:

Test replication and upgrade steps on a non-production system.
Monitor replication status closely during the upgrade process.
Optional Post-Upgrade Tasks
Remove Unused MySQL Packages:

Clean up any old MySQL version packages that are no longer needed.
Test Performance:

Run performance tests and monitor server metrics to confirm that the system is running optimally post-upgrade.
Application Compatibility:

Ensure that the application is fully compatible with MySQL 8.0, especially with the new authentication plugin (caching_sha2_password) and changes to character sets.
